/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cn.com.taiji.learn;

import antlr.taiji.DataLexer;
import antlr.taiji.ExprLexer;
import antlr.taiji.ExprParser;
import antlr.taiji.RowsParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeWalker;
import org.junit.jupiter.api.Test;
import org.stringtemplate.v4.ST;

class AppTest {
    @Test void arrayInitTest()  {
        String source = "{1,2,3, 0, 5, 66}";
        antlr.taiji.ArrayInitLexer lexer = new antlr.taiji.ArrayInitLexer(CharStreams.fromString(source)); // create a buffer of tokens pulled from the lexer
        CommonTokenStream tokens = new CommonTokenStream(lexer); // create a parser that feeds off the tokens buffer
        antlr.taiji.ArrayInitParser parser = new antlr.taiji.ArrayInitParser(tokens);
        ParseTree tree = parser.init(); // begin parsing at init rule
        //System.out.println(tree.toStringTree(parser));
        ParseTreeWalker walker = new ParseTreeWalker();
        ShortToUnicodeString stus = new ShortToUnicodeString();
        walker.walk((ParseTreeListener) stus, tree);
        System.out.println((int)stus.getResult().charAt(3));
    }

    @Test void exprTest() {
        String source = "x = 3\n y=4 \n x+y \n";
        antlr.taiji.ExprLexer lexer = new ExprLexer(CharStreams.fromString(source));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        antlr.taiji.ExprParser parser = new ExprParser(tokens);
        ParseTree tree = parser.prog();
        System.out.println(tree.toStringTree(parser));
        EvalVisitor visitor = new EvalVisitor();
        visitor.visit(tree);
    }

    @Test void rowTest() {
        String source = """
                parrr\tTerence Parr\t101
                tombu\tTom Burns\t020
                bke\tKevin Edgar\t008
                """;
        antlr.taiji.RowsLexer lexer = new antlr.taiji.RowsLexer(CharStreams.fromString(source));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        int col = 2;
        antlr.taiji.RowsParser parser = new RowsParser(tokens, col);
        parser.setBuildParseTree(false);
        parser.file();
        System.out.println(parser.getResult());
    }

    @Test void dataTest() {
        String source = "\u000234\u0003531\u0000\u0001Q";
        antlr.taiji.DataLexer lexer = new DataLexer(CharStreams.fromString(source));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        antlr.taiji.DataParser parser = new antlr.taiji.DataParser(tokens);
        ParseTree tree = parser.file();
        System.out.println(tree.toStringTree(parser));
        DataVisitor visitor = new DataVisitor();
        visitor.visit(tree);
        for (int i = 0; i < tree.getChildCount(); i++) {
            String s = tree.getChild(i).getChild(1).getText();
            System.out.printf("%d -> [%s]\n", i, s);
        }
    }

    @Test void beijingCodeTest() {
        String source = "BJIDA001X002A1\u000234\u0003532tttteeee1\u0003SIG";
        antlr.taiji.BeijingCodeLexer lexer = new antlr.taiji.BeijingCodeLexer(CharStreams.fromString(source));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        antlr.taiji.BeijingCodeParser parser = new antlr.taiji.BeijingCodeParser(tokens);
        ParseTree tree = parser.init();
        parser.setBuildParseTree(false);
        BeijingCodeVisitor visitor = new BeijingCodeVisitor();
        visitor.visit(tree);
//        for (int i = 0; i < tree.getChildCount(); i++) {
//            ParseTree t = tree.getChild(i);
//            String s = t.getText();
//            if (t instanceof antlr.taiji.BeijingCodeParser.PsContext) {
//                s = s.substring(1);
//            }
//            System.out.printf("%d -> [%s]\n", i, s);
//        }
        antlr.taiji.BeijingCodeParser.InitContext init = (antlr.taiji.BeijingCodeParser.InitContext) tree;
        System.out.println(init.chan.getText());
        System.out.println(init.id.getText().substring(1));
        System.out.println(init.name.getText().substring(1));
        System.out.println(init.manner.getText());
    }

    @Test
    public void stringTemplate01Test() {
        ST hello = new ST("Hello, <name>");
        hello.add("name", "World");
        System.out.println(hello.render());
    }
}
